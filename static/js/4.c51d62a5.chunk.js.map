{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","action","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","htmlFor","label"],"mappings":"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","file":"static/js/4.c51d62a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return { isSignUp: !prevState.isSignUp };\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form action=\"\" onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                    <Button\r\n                        clicked={this.switchAuthModeHandler}\r\n                        btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}</Button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n\r\n    }\r\n\r\n    return(\r\n    <div className={classes.Input}>\r\n        <label className={classes.Label} htmlFor=\"\">{props.label}</label>\r\n        {inputElement}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}