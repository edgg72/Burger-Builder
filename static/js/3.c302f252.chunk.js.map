{"version":3,"sources":["containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","Button","btnType","disabled","loading","Spinner","className","classes","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","checkoutSummary","CheckoutSummary","style","width","margin","Burger","clicked","checkoutCancelled","checkoutContinued","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","htmlFor","label","module","exports"],"mappings":"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","file":"static/js/3.c302f252.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport axios from '../../../axios-orders';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your name'\r\n\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-mail'\r\n\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm, { [inputIdentifier]: updatedFormElement })\r\n        let formIsValid = true;\r\n\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid })\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType='Success' disabled={!this.state.formIsValid} >ORDER</Button>\r\n            </form>);\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button\r\n                btnType='Danger'\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button\r\n                btnType='Success'\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\n\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data')\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to='/' />\r\n\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n\r\n    }\r\n\r\n    return(\r\n    <div className={classes.Input}>\r\n        <label className={classes.Label} htmlFor=\"\">{props.label}</label>\r\n        {inputElement}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};"],"sourceRoot":""}